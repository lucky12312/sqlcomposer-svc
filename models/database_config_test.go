// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDatabaseConfigs(t *testing.T) {
	t.Parallel()

	query := DatabaseConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDatabaseConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatabaseConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DatabaseConfigs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatabaseConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DatabaseConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDatabaseConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DatabaseConfigExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DatabaseConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DatabaseConfigExists to return true, but got false.")
	}
}

func testDatabaseConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	databaseConfigFound, err := FindDatabaseConfig(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if databaseConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDatabaseConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DatabaseConfigs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDatabaseConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DatabaseConfigs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDatabaseConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	databaseConfigOne := &DatabaseConfig{}
	databaseConfigTwo := &DatabaseConfig{}
	if err = randomize.Struct(seed, databaseConfigOne, databaseConfigDBTypes, false, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, databaseConfigTwo, databaseConfigDBTypes, false, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = databaseConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = databaseConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DatabaseConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDatabaseConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	databaseConfigOne := &DatabaseConfig{}
	databaseConfigTwo := &DatabaseConfig{}
	if err = randomize.Struct(seed, databaseConfigOne, databaseConfigDBTypes, false, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, databaseConfigTwo, databaseConfigDBTypes, false, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = databaseConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = databaseConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func databaseConfigBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func databaseConfigAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DatabaseConfig) error {
	*o = DatabaseConfig{}
	return nil
}

func testDatabaseConfigsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DatabaseConfig{}
	o := &DatabaseConfig{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig object: %s", err)
	}

	AddDatabaseConfigHook(boil.BeforeInsertHook, databaseConfigBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	databaseConfigBeforeInsertHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.AfterInsertHook, databaseConfigAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	databaseConfigAfterInsertHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.AfterSelectHook, databaseConfigAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	databaseConfigAfterSelectHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.BeforeUpdateHook, databaseConfigBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	databaseConfigBeforeUpdateHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.AfterUpdateHook, databaseConfigAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	databaseConfigAfterUpdateHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.BeforeDeleteHook, databaseConfigBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	databaseConfigBeforeDeleteHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.AfterDeleteHook, databaseConfigAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	databaseConfigAfterDeleteHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.BeforeUpsertHook, databaseConfigBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	databaseConfigBeforeUpsertHooks = []DatabaseConfigHook{}

	AddDatabaseConfigHook(boil.AfterUpsertHook, databaseConfigAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	databaseConfigAfterUpsertHooks = []DatabaseConfigHook{}
}

func testDatabaseConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDatabaseConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(databaseConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDatabaseConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDatabaseConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DatabaseConfigSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDatabaseConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DatabaseConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	databaseConfigDBTypes = map[string]string{`ID`: `int`, `UUID`: `varchar`, `Name`: `varchar`, `DSN`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `DeletedAt`: `datetime`}
	_                     = bytes.MinRead
)

func testDatabaseConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(databaseConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(databaseConfigAllColumns) == len(databaseConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDatabaseConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(databaseConfigAllColumns) == len(databaseConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DatabaseConfig{}
	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, databaseConfigDBTypes, true, databaseConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(databaseConfigAllColumns, databaseConfigPrimaryKeyColumns) {
		fields = databaseConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			databaseConfigAllColumns,
			databaseConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DatabaseConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDatabaseConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(databaseConfigAllColumns) == len(databaseConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDatabaseConfigUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DatabaseConfig{}
	if err = randomize.Struct(seed, &o, databaseConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DatabaseConfig: %s", err)
	}

	count, err := DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, databaseConfigDBTypes, false, databaseConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DatabaseConfig struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DatabaseConfig: %s", err)
	}

	count, err = DatabaseConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
