// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDocs(t *testing.T) {
	t.Parallel()

	query := Docs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDocsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Docs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DocExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Doc exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DocExists to return true, but got false.")
	}
}

func testDocsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	docFound, err := FindDoc(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if docFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDocsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Docs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDocsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Docs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDocsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	docOne := &Doc{}
	docTwo := &Doc{}
	if err = randomize.Struct(seed, docOne, docDBTypes, false, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}
	if err = randomize.Struct(seed, docTwo, docDBTypes, false, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = docOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = docTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Docs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDocsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	docOne := &Doc{}
	docTwo := &Doc{}
	if err = randomize.Struct(seed, docOne, docDBTypes, false, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}
	if err = randomize.Struct(seed, docTwo, docDBTypes, false, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = docOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = docTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func docBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func docAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Doc) error {
	*o = Doc{}
	return nil
}

func testDocsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Doc{}
	o := &Doc{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, docDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Doc object: %s", err)
	}

	AddDocHook(boil.BeforeInsertHook, docBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	docBeforeInsertHooks = []DocHook{}

	AddDocHook(boil.AfterInsertHook, docAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	docAfterInsertHooks = []DocHook{}

	AddDocHook(boil.AfterSelectHook, docAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	docAfterSelectHooks = []DocHook{}

	AddDocHook(boil.BeforeUpdateHook, docBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	docBeforeUpdateHooks = []DocHook{}

	AddDocHook(boil.AfterUpdateHook, docAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	docAfterUpdateHooks = []DocHook{}

	AddDocHook(boil.BeforeDeleteHook, docBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	docBeforeDeleteHooks = []DocHook{}

	AddDocHook(boil.AfterDeleteHook, docAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	docAfterDeleteHooks = []DocHook{}

	AddDocHook(boil.BeforeUpsertHook, docBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	docBeforeUpsertHooks = []DocHook{}

	AddDocHook(boil.AfterUpsertHook, docAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	docAfterUpsertHooks = []DocHook{}
}

func testDocsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(docColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Docs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	docDBTypes = map[string]string{`ID`: `int`, `UUID`: `varchar`, `Name`: `varchar`, `Path`: `varchar`, `Content`: `text`, `Description`: `varchar`, `DBName`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `DeletedAt`: `datetime`}
	_          = bytes.MinRead
)

func testDocsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(docPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(docAllColumns) == len(docPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, docDBTypes, true, docPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDocsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(docAllColumns) == len(docPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Doc{}
	if err = randomize.Struct(seed, o, docDBTypes, true, docColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, docDBTypes, true, docPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(docAllColumns, docPrimaryKeyColumns) {
		fields = docAllColumns
	} else {
		fields = strmangle.SetComplement(
			docAllColumns,
			docPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DocSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDocsUpsert(t *testing.T) {
	t.Parallel()

	if len(docAllColumns) == len(docPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDocUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Doc{}
	if err = randomize.Struct(seed, &o, docDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Doc: %s", err)
	}

	count, err := Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, docDBTypes, false, docPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doc struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Doc: %s", err)
	}

	count, err = Docs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
