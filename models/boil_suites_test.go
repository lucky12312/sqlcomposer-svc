// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigs)
	t.Run("Docs", testDocs)
}

func TestDelete(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsDelete)
	t.Run("Docs", testDocsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsQueryDeleteAll)
	t.Run("Docs", testDocsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsSliceDeleteAll)
	t.Run("Docs", testDocsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsExists)
	t.Run("Docs", testDocsExists)
}

func TestFind(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsFind)
	t.Run("Docs", testDocsFind)
}

func TestBind(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsBind)
	t.Run("Docs", testDocsBind)
}

func TestOne(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsOne)
	t.Run("Docs", testDocsOne)
}

func TestAll(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsAll)
	t.Run("Docs", testDocsAll)
}

func TestCount(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsCount)
	t.Run("Docs", testDocsCount)
}

func TestHooks(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsHooks)
	t.Run("Docs", testDocsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsInsert)
	t.Run("DatabaseConfigs", testDatabaseConfigsInsertWhitelist)
	t.Run("Docs", testDocsInsert)
	t.Run("Docs", testDocsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsReload)
	t.Run("Docs", testDocsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsReloadAll)
	t.Run("Docs", testDocsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsSelect)
	t.Run("Docs", testDocsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsUpdate)
	t.Run("Docs", testDocsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DatabaseConfigs", testDatabaseConfigsSliceUpdateAll)
	t.Run("Docs", testDocsSliceUpdateAll)
}
